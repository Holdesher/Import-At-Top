import { arrOfSymbols, arrTriggerWordImport, arrTriggerWordOther, baseConfig } from './constant';
import {
	checkHaveImportInMainCode,
	connectImportsFileWithConfigImports,
	convertImportInStringToObjectImports,
	copyArray,
	finallyCode,
	getPartCode,
} from './function';

import type { TConfigParams } from './types';

/* 
* üí° ru: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ.

* üí° en: Main function extension.
*/

export const ImportAtTop = (code: string, configExtension: TConfigParams[]) => {
	//| ‚úÖ Variable

	/* 
	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–∞–∑–æ–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.

	* üí° en: Variable for config from user or base extension.
	*/

	const configApp: TConfigParams[] = copyArray(configExtension || baseConfig);

	//| ‚úÖ Main

	/* 
	* üí° ru: –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç—ã.

	* üí° en: We get a part of the code that contains only imports.
	*/

	const codeImportsFile = getPartCode({
		code: code,
		type: 'import',
		arrTriggerWordImport: arrTriggerWordImport,
		arrTriggerWordOther: arrTriggerWordOther,
	})
		.join('')
		.replace(/^\s+|\s+$|\s+(?=\s)/g, '')
		.replace(/import/g, '; import')
		.split('; ')
		.filter((el: string) => el !== '');

	/* 
	* üí° ru: –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤—É.

	* üí° en: We get a part of the code that contains only the base.
	*/

	const codeMainFile = getPartCode({
		code: code,
		type: 'main',
		arrTriggerWordImport: arrTriggerWordImport,
		arrTriggerWordOther: arrTriggerWordOther,
	});

	/* 
	* üí° ru: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ - –∏—Ö —Ç–∏–ø –∏ –ø–∞–∫–µ—Ç.

	* üí° en: Getting an array with data from imports - their type and package.
	*/

	const arrImportsObject = convertImportInStringToObjectImports(codeImportsFile, arrOfSymbols);

	/* 
	* üí° ru: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–º–ø–æ—Ä—Ç–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞, —Å –∫–æ—Ñ–∏–≥–æ–º.

	* üí° en: Connecting an array with data about imports from a file, with a config.
	*/

	const allArrayImports = connectImportsFileWithConfigImports(
		codeImportsFile,
		arrImportsObject,
		configApp,
	);

	/* 
	* üí° ru: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–æ–¥—É —Ñ–∞–π–ª–∞.

	* üí° en: Checking the validity of imports in the array in relation to the main code of the file.
	*/

	const arrImportsResult = checkHaveImportInMainCode(codeMainFile, allArrayImports);

	/* 
	* üí° ru: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∫–æ–¥–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–µ–¥–∏–Ω—è—é—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥.

	* üí° en: The final assembly of the code, in which the received imports and the main code are connected.
	*/

	const result = finallyCode(arrImportsResult, codeMainFile);

	return result;
};
