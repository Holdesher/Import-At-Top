import * as prettier from 'prettier';
import * as eslint from 'eslint';
import type { TConfigApp, TFormattedCodeLinter, TFormatterApp } from './types';
import { baseConfig, baseFormatter } from './constant';
import {
	getArrayImportPackages,
	baseSchemaArrayConfigLocal,
	arrImportToObjectImport,
	gettingOnlyStringImports,
	removeUnusedArray,
	joinArraysConfigAndImportFile,
} from './array';
import { copyArray, removeNewLines } from './other';
import { getCodeImportText, getCodeMainText, convertCode, formattingMainCode } from './text';

/* 

* üí° ru: –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –ê–≤—Ç–æ –∏–º–ø–æ—Ä—Ç–∞

* üí° en: 

*/

export const ImportAtTop = (
	text: string,
	configExtension: TConfigApp[],
	formatterExtension: TFormatterApp,
) => {
	//| ‚úÖ Variable

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–º–ø–æ—Ä—Ç–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:
	* configExtension - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
	* baseConfig - –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.

	* üí° en: 

	*/

	const configApp: TConfigApp[] = copyArray(configExtension) || copyArray(baseConfig);

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –±–∞–∑–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:
	* formatterExtension - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
	* baseFormatter - –±–∞–∑–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è.

	* üí° en: 

	*/

	const formatterApp = formatterExtension || baseFormatter;

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ - –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Ñ–∞–π–ª–∞.

	* üí° en: 

	*/

	let configDataFile = [];

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ñ–∞–π–ª–∞.

	* üí° en: 

	*/

	let codeTextImport = ``;

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ —Ñ–∞–π–ª–∞.

	* üí° en: 

	*/

	let codeTextMain = ``;

	//| ‚úÖ Formatted

	/* 

	* üí° ru: –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
	* code - –ö–æ–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ prettier –∏ eslint.
	* type - –¢–∏–ø —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤ —Ç–∏–ø–µ - finally, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ formatterApp.

	* üí° en: 

	*/

	const formattedCodeLinter = ({ code, type = 'finally' }: TFormattedCodeLinter) => {
		if (type === 'develop') {
			// Use prettier - Develop
			const formattedCode = prettier.format(code, {
				semi: true,
				singleQuote: true,
				trailingComma: 'es5',
				arrowParens: 'always',
				parser: 'babel',
			});

			// Use eslint - Develop
			const linter = new eslint.Linter();
			const lintingErrors = linter.verifyAndFix(formattedCode, {
				parserOptions: {
					ecmaVersion: 6,
					sourceType: 'module',
					ecmaFeatures: {
						jsx: true,
					},
				},
				rules: {
					'no-unused-vars': 2,
				},
			});

			return lintingErrors.output;
		}

		// Use prettier - Finally
		const formattedCode = prettier.format(code, {
			semi: formatterApp.semi,
			printWidth: formatterApp.printWidth,
			tabWidth: formatterApp.tabWidth,
			useTabs: formatterApp.useTabs,
			bracketSpacing: formatterApp.bracketSpacing,
			bracketSameLine: formatterApp.bracketSameLine,
			jsxBracketSameLine: formatterApp.jsxBracketSameLine,
			singleQuote: formatterApp.singleQuote,
			trailingComma: 'es5',
			arrowParens: 'always',
			parser: 'babel',
		});

		// Use eslint - Finally
		const linter = new eslint.Linter();
		const lintingErrors = linter.verifyAndFix(formattedCode, {
			parserOptions: {
				ecmaVersion: 6,
				sourceType: 'module',
				ecmaFeatures: {
					jsx: true,
				},
			},
			rules: {
				'no-unused-vars': 2,
			},
		});

		return lintingErrors.output;
	};

	//| ‚úÖ Main Process

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã–π –∫–æ–¥ –∏ –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω—ã–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –±–µ–∑ '\n'.
	* formattedCodeLinter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
	* removeNewLines - –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –±–µ–∑ '\n'.

	* üí° en: 

	*/

	const formattedCodeText = removeNewLines(formattedCodeLinter({ code: text }));

	/* 

	* üí° ru: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤.
	* getCodeImportText - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞.

	* üí° en: 

	*/

	codeTextImport = getCodeImportText(formattedCodeText);

	/* 

	* üí° ru: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–∞ - –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É.
	* getCodeMainText - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞.
	* formattedCodeLinter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞.
	* removeNewLines - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è—è '\n'.

	* üí° en: 

	*/

	codeTextMain = removeNewLines(
		formattedCodeLinter({ code: getCodeMainText(formattedCodeText) as string }),
	);

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ö—Ä–∞–Ω–∏—Ç –º–∞—Å—Å–∏–≤ —Å –ø–∞–∫–µ—Ç–∞–º–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ñ–∞–π–ª–∞.
	* getArrayImportPackages - –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å –ø–∞–∫–µ—Ç–∞–º–∏ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞.

	* üí° en: 

	*/

	const arrayImportsStr = getArrayImportPackages(codeTextImport);

	/* 

	* üí° ru: –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å –ø–∞–∫–µ—Ç–∞–º–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏.
	* baseSchemaArrayConfigLocal - —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞.

	* üí° en: 

	*/

	configDataFile = baseSchemaArrayConfigLocal(arrayImportsStr);

	/* 

	* üí° ru: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–º–ø–æ—Ä—Ç–∞—Ö.
	* gettingOnlyStringImports - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ —Å—Ç—Ä–æ–∫ –∏–º–ø–æ—Ä—Ç–∞.
	* stringCodeToObject - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –∏–º–ø–æ—Ä—Ç–µ.

	* üí° en: 

	*/

	configDataFile = arrImportToObjectImport(
		gettingOnlyStringImports(codeTextImport),
		configDataFile,
	);

	/* 

	* üí° ru: –ü–µ—Ä–µ–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞, –Ω–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –∏–º–ø–æ—Ä—Ç–æ–≤.
	* removeUnusedArray - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å–ª–∏ –ª–∏ –≤ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ

	* üí° en: 

	*/

	configApp.forEach(el => {
		el.triggerExport = removeUnusedArray(codeTextMain, el.triggerExport);
		el.triggerDefault = removeUnusedArray(codeTextMain, el.triggerDefault);
	});

	/* 

	* üí° ru: –ü–µ—Ä–µ–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏–π –≤ –º–∞—Å—Å–∏–≤–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ñ–∞–π–ª–∞ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –∫–æ–¥–∞, –Ω–∞ –Ω–∞–ª–∏—á–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ –∏–º–ø–æ—Ä—Ç–æ–≤.
	* removeUnusedArray - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å–ª–∏ –ª–∏ –≤ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ

	* üí° en: 

	*/
	console.log('‚úÖ configDataFile 1   ', configDataFile);

	configDataFile.forEach(el => {
		el.triggerExport = removeUnusedArray(codeTextMain, el.triggerExport);
		el.triggerDefault = removeUnusedArray(codeTextMain, el.triggerDefault);
	});

	console.log('‚úÖ configDataFile 2   ', configDataFile);

	/* 

	* üí° ru: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ —Ñ–∞–π–ª–∞.
	* joinArraysByPackage - –∏—Å–ø–æ–ª—å–∑—É—è –º–∞—Å—Å–∏–≤—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –º–∞—Å—Å–∏–≤—ã ( –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –º–∞—Å—Å–∏–≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∏–∑ —Ñ–∞–π–ª–∞ )

	* üí° en: 

	*/

	configDataFile = joinArraysConfigAndImportFile(configApp, configDataFile);

	console.log('‚úÖ configDataFile 3   ', configDataFile);

	/* 

	* üí° ru: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫—É.
	* convertCode - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤ —Å—Ç—Ä–æ–∫—É.

	* üí° en: 

	*/

	const result = convertCode(configDataFile);

	/* 

	* üí° ru: –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
	* result - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ 
	* formattingMainCode - –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	* formattedCodeLinter - —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Ç–∏–ø–æ–º ( –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ )

	* üí° en: 

	*/

	return `${result}\n\n${formattedCodeLinter({ code: formattingMainCode(text), type: 'finally' })}`;
};

//| Export

export * from './array';
export * from './other';
export * from './text';
export * from './constant';
export * from './types';
